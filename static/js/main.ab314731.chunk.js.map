{"version":3,"sources":["component/SearchMovie.js","App.js","reportWebVitals.js","index.js"],"names":["SearchMovie","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","console","log","url","fetch","res","json","data","results","error","className","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","map","movie","src","poster_path","alt","title","release_date","vote_average","overview","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAkDeA,MAhDf,WAEI,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAcC,EAAd,KAGA,EAA2BF,mBAAS,IAApC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAY,uCAAE,WAAMC,GAAN,mBAAAC,EAAA,6DAChBD,EAAEE,iBACLC,QAAQC,IAAI,cAGPC,EALc,+GAK+FV,EAL/F,iDAOHW,MAAMD,GAPH,cAOdE,EAPc,gBAQFA,EAAIC,OARF,OAQdC,EARc,OASpBX,EAAUW,EAAKC,SATK,kDAWhBP,QAAQQ,MAAR,MAXgB,0DAAF,sDAclB,OACI,qCACA,uBAAMC,UAAU,OAAOC,SAAUd,EAAjC,UACI,uBAAOa,UAAU,QAAQE,QAAQ,QAAjC,wBACA,uBAAOF,UAAU,QAAQG,KAAK,OAAOC,KAAK,QAAQC,YAAY,oBAAoBC,MAAOvB,EAAOwB,SAAU,SAACnB,GAAD,OAAKJ,EAASI,EAAEoB,OAAOF,UACjI,wBAAQN,UAAU,SAASG,KAAK,SAAhC,uBAEJ,qBAAKH,UAAU,YAAf,SACKf,EAAOwB,KAAI,SAAAC,GAAK,OACb,sBAAKV,UAAU,OAAf,UAEI,qBAAKA,UAAU,cAAeW,IAAG,wEAAmED,EAAME,aAAeC,IAAKH,EAAMI,MAAQ,WAC/I,sBAAKd,UAAU,gBAAf,UACI,oBAAIA,UAAU,cAAd,SAA6BU,EAAMI,QACnC,4BAAG,mDAAsBJ,EAAMK,kBAC/B,4BAAG,6CAAgBL,EAAMM,kBACzB,mBAAGhB,UAAU,aAAb,SAA2BU,EAAMO,0BC1BvCC,MATf,WACE,OACE,sBAAKlB,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,gCACA,cAAC,EAAD,QCISmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ab314731.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction SearchMovie() {\n    //states- input query,movies\n    const [query, setQuery] =useState('');\n    \n    //create the state for movies and update that state  appropriately.\n    const [movies, setMovies] =useState([]);\n\n    const searchMovies= async(e)=>{\n        e.preventDefault();\n     console.log('submitting');\n     /*const query='Jurassic Park';*/\n\n    const url= `https://api.themoviedb.org/3/movie/550?api_key=c84c8884b8de590025943721620b2ce2&language=en-US&query=${query}&page=1&include_adult=false`;\n   try{\n    const res= await fetch(url)\n    const data= await res.json();\n    setMovies(data.results);\n    }catch(err){\n        console.error(err);\n    }\n}\n    return (\n        <>\n        <form className='form' onSubmit={searchMovies}>\n            <label className='label' htmlFor='query'>Movie name</label>\n            <input className='input' type='text' name='query' placeholder='i-e Jurassic Park' value={query} onChange={(e)=>setQuery(e.target.value)}/>\n            <button className='button' type='submit' >Search</button>\n        </form>\n        <div className='card-list'>\n            {movies.map(movie => (\n                <div className='card'>\n                   \n                    <img className='card--image'  src={`https://www.imdb.com/title/tt0107290/mediaviewer/rm3913805824/${movie.poster_path}`} alt={movie.title + 'poster'}/>\n                 <div className='card--content'>\n                     <h3 className='card--title'>{movie.title}</h3>\n                     <p><small>RELEASE DATE: {movie.release_date}</small></p>\n                     <p><small>RATING: {movie.vote_average}</small></p>\n                     <p className='card--desc'>{movie.overview}</p>\n                 </div>\n                </div>\n\n            ))}\n\n        </div>\n        </>\n    )\n}\n\nexport default SearchMovie\n","import './App.css';\n\nimport SearchMovie from './component/SearchMovie';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className='title'>React Movie Search</h1>\n      <SearchMovie/>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}